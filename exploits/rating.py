import requests
import json
import os
import random
import uuid
import re

BASE_URL = "http://localhost:8000"

TEAM_REGEX = r"TEAM[0-9]{3}_[A-Z0-9]{32}"
# === 1. Конфигурация теста ===
CATEGORIES = [
    "Университетские задачи_Мат.анализ",
    "Лабораторные работы_Программирование",
    "Лабораторные работы_Модели безопасности",
    "Лабораторные работы_Сети",
    "Лабораторные работы_ТЧМК",
    "Лабораторные работы_Языки программирования",
    "Школьные задачи_Алгебра",
    "Школьные задачи_Геометрия",
    "Школьные задачи_Физика",
    "Университетские задачи_Философия",
    "Университетские задачи_Экономика",
    "Университетские задачи_КМЗИ",
    "Университетские задачи_Мат.статистика",
    "Университетские задачи_Теория вероятностей",
    "Университетские задачи_Алгебра",
    "Университетские задачи_Программирование",
    "Научные работы_Курсовая работа",
    "Научные работы_Диплом"
]

#5 случайных категорий для ГДЗ seeker
REGULAR_CATEGORIES = random.sample(CATEGORIES, 5)
# Выбираем случайную категорию для элитного ГДЗ
ELITE_CATEGORY = random.choice(CATEGORIES)


def create_temp_png():
    png_data = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x01\x00\x00\x00\x01\x08\x02\x00\x00\x00\x90wS\xde\x00\x00\x00\x0cIDAT\x08\xd7c\xf8\xff\xff?\x00\x05\xfe\x02\xfe\xdc\xccY\xe7\x00\x00\x00\x00IEND\xaeB`\x82'
    with open("temp.png", "wb") as f:
        f.write(png_data)
    return "temp.png"


def register_user(username, password, realname):
    user_data = {
        "username": username,
        "password": password,
        "realname": realname
    }
    resp = requests.post(
        f"{BASE_URL}/register",
        json=user_data
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка регистрации пользователя {username}: {resp.text}")
        exit(1)
    print(f"[+] Пользователь {username} зарегистрирован")
    return resp.json()


def auth_user(username, password):
    resp = requests.post(
        f"{BASE_URL}/token",
        data={"username": username, "password": password},
        headers={"Content-Type": "application/x-www-form-urlencoded"}
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка аутентификации пользователя {username}: {resp.text}")
        exit(1)
    print(f"[+] Пользователь {username} аутентифицирован")
    return resp.json()["access_token"]


def create_gdz(token, category, is_elite=False):
    gdz_data = {
        "description": f"{'Элитное' if is_elite else 'Обычное'} ГДЗ в {category}",
        "full_description": f"Полное описание для {'элитного' if is_elite else 'обычного'} ГДЗ в {category}",
        "category": category,
        "content_text": "Ответ: 42" if not is_elite else "Элитный ответ: 42",
        "price": 0,
        "is_elite": is_elite
    }

    with open("temp.png", "rb") as f:
        files = {
            'content_file': ('solution.png', f, 'image/png'),
            'gdz_str': (None, json.dumps(gdz_data))
        }
        resp = requests.post(
            f"{BASE_URL}/gdz/create",
            files=files,
            headers={"Authorization": f"Bearer {token}"}
        )
        print(f"[DEBUG] Ответ сервера: {resp.text}")
        if resp.status_code not in [200, 201]:
            print(f"[!] Ошибка создания ГДЗ в {category}: {resp.text}")
            exit(1)
        print(f"[+] Создано {'элитное' if is_elite else 'обычное'} ГДЗ в категории '{category}'")
        try:
            response_data = resp.json()
        except ValueError:
            print(f"[!] Ошибка: ответ не является JSON: {resp.text}")
            exit(1)


def get_user_gdz_ids(token):
    resp = requests.get(
        f"{BASE_URL}/profile/data",
        headers={"Authorization": f"Bearer {token}"}
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка получения данных профиля: {resp.text}")
        exit(1)
    profile_data = resp.json()
    print(f"[+] Данные профиля: {json.dumps(profile_data, indent=2)}")
    gdz_list = profile_data.get("gdz_list", [])
    # Сортируем по id в обратном порядке и берём 5 последних
    sorted_gdz = sorted(gdz_list, key=lambda x: x["id"], reverse=True)[:5]
    if len(sorted_gdz) < 5:
        print(f"[!] Ошибка: у пользователя менее 5 ГДЗ, найдено {len(sorted_gdz)}")
        exit(1)
    return [gdz["id"] for gdz in sorted_gdz]


# === 3. Инициализация ===
temp_png_path = create_temp_png()

# # Аутентификация elite_user (предполагается, что он существует)
# try:
#     token_elite = auth_user("elite_user", "password")
# except Exception as e:
#     print(f"[!] Ошибка при аутентификации elite_user: {str(e)}")
#     exit(1)
#
# # Создание элитного ГДЗ для elite_user
# try:
#     elite_gdz_id = create_gdz(token_elite, ELITE_CATEGORY, is_elite=True)
# except Exception as e:
#     print(f"[!] Ошибка при создании элитного ГДЗ: {str(e)}")
#     exit(1)

# Регистрация и аутентификация seeker
try:
    seeker_username = f"seek_{uuid.uuid4().hex[:8]}"
    seeker_password = "seeker_password"
    seeker_realname = "Seeker Realname"
    register_user(seeker_username, seeker_password, seeker_realname)
    token_seeker = auth_user(seeker_username, seeker_password)
except Exception as e:
    print(f"[!] Ошибка при создании/аутентификации seeker: {str(e)}")
    exit(1)

# Регистрация и аутентификация rater
rater_tokens = {}
try:
    rater_username = f"rater_{uuid.uuid4().hex[:8]}"
    rater_password = f"rater_password"
    rater_realname = f"Rater_Realname"
    register_user(rater_username, rater_password, rater_realname)
    rater_token = auth_user(rater_username, rater_password)
except Exception as e:
    print(f"[!] Ошибка при создании/аутентификации rater: {str(e)}")
    exit(1)

# Создаем ровно 5 ГДЗ для seeker
regular_gdz_ids = []
try:
    for category in REGULAR_CATEGORIES:
        gdz_id = create_gdz(token_seeker, category)
        regular_gdz_ids.append(gdz_id)
    print(f"[+] Создано {len(regular_gdz_ids)} ГДЗ в категориях: {REGULAR_CATEGORIES}")
except Exception as e:
    print(f"[!] Ошибка при создании ГДЗ для seeker: {str(e)}")
    exit(1)

# Получаем 5 последних ГДЗ через /profile/data
try:
    profile_gdz_ids = get_user_gdz_ids(token_seeker)
    print(f"[+] Последние 5 ID ГДЗ пользователя seeker: {profile_gdz_ids}")
except Exception as e:
    print(f"[!] Ошибка при получении ГДЗ: {str(e)}")
    exit(1)

# === 4. Оценка 5 последних ГДЗ ===
gdz_to_rate = profile_gdz_ids  # Используем 5 последних ID
print(f"[+] Оцениваем {len(gdz_to_rate)} ГДЗ: {gdz_to_rate}")

try:
    for gdz_id in gdz_to_rate:
        # Бесплатная покупка
        resp_purchase = requests.post(
            f"{BASE_URL}/gdz/{gdz_id}/free-purchase",
            headers={"Authorization": f"Bearer {rater_token}"}
        )
        if resp_purchase.status_code not in [200, 201]:
            print(f"[!] Ошибка покупки ГДЗ {gdz_id}: {resp_purchase.text}")
            exit(1)
        print(f"[+] ГДЗ {gdz_id} куплено для {rater_username}")

        # Оценка 5
        resp_rate = requests.post(
            f"{BASE_URL}/gdz/rate",
            json={"gdz_id": gdz_id, "value": 5},
            headers={"Authorization": f"Bearer {rater_token}"}
        )
        if resp_rate.status_code != 200:
            print(f"[!] Ошибка оценки ГДЗ {gdz_id}: {resp_rate.text}")
            exit(1)
        print(f"[+] ГДЗ {gdz_id} оценено {rater_username} (оценка: 5)")
except Exception as e:
    print(f"[!] Ошибка при оценке ГДЗ для {rater_username}: {str(e)}")
    exit(1)

# === 5. Проверка рейтинга seeker ===
resp = requests.get(
    f"{BASE_URL}/users/me",
    headers={"Authorization": f"Bearer {token_seeker}"}
)
if resp.status_code != 200:
    print(f"[!] Ошибка получения профиля seeker: {resp.text}")
    exit(1)
user_rating = resp.json().get("user_rating", 0)
print(f"[+] Рейтинг seeker: {user_rating}")
if user_rating < 4.8:
    print(f"[!] Рейтинг seeker {user_rating} меньше 4.8")
    exit(1)
print(f"[+] Пользователь seeker стал элитным (рейтинг: {user_rating})")

# === 6. Поиск всех элитных ГДЗ по категориям ===
print("\n[+] Поиск элитных ГДЗ во всех категориях...")
elite_gdz_found = []

flags = []
# Проверяем все категории из списка
for category in CATEGORIES:
    try:
        resp = requests.get(
            f"{BASE_URL}/gdz_category/{category}",
            headers={"Authorization": f"Bearer {token_seeker}"}
        )
        if resp.status_code != 200:
            print(f"[!] Ошибка получения ГДЗ в категории {category}: {resp.text}")
            continue

        print(f"Категория '{category}': {len(resp.json())} ГДЗ")
        for gdz in resp.json():
            if gdz.get("is_elite") and re.fullmatch(TEAM_REGEX, gdz.get("description")):
                flags.append(gdz.get("description"))

    except Exception as e:
        print(f"[!] Ошибка при поиске элитных ГДЗ в категории {category}: {str(e)}")
        continue

# === 7. Завершение ===
if not flags:
    print("[!] Флагов не найдено")
    exit(1)
os.remove(temp_png_path)
print(flags)
