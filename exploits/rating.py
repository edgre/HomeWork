import requests
import json
import random
import uuid
import re
import time

BASE_URL = "http://localhost:8000"

TEAM_REGEX = r"TEAM[0-9]{3}_[A-Z0-9]{32}"
CATEGORIES = [
    "Университетские задачи_Мат.анализ",
    "Лабораторные работы_Модели безопасности",
    "Лабораторные работы_Компьютерные сети",
    "Лабораторные работы_ТЧМК",
    "Лабораторные работы_АИСД",
    "Школьные задачи_Алгебра",
    "Школьные задачи_Геометрия",
    "Школьные задачи_Физика",
    "Школьные задачи_Информатика",
    "Университетские задачи_Экономика",
    "Университетские задачи_КМЗИ",
    "Университетские задачи_Мат.статистика",
    "Университетские задачи_Теория вероятностей",
    "Университетские задачи_Алгебра",
    "Мемология_Уроки Французского",
    "Мемология_Джаваскриптолюбие",
    "Мемология_Инглиш мафака",
    "Мемология_Царица наук"
]


def register_user(username, password, realname):
    user_data = {
        "username": username,
        "password": password,
        "realname": realname
    }
    resp = requests.post(
        f"{BASE_URL}/register",
        json=user_data
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка регистрации пользователя {username}: {resp.text}")
        exit(1)
    print(f"[+] Пользователь {username} зарегистрирован")
    return resp.json()


def auth_user(username, password):
    resp = requests.post(
        f"{BASE_URL}/token",
        data={"username": username, "password": password},
        headers={"Content-Type": "application/x-www-form-urlencoded"}
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка аутентификации пользователя {username}: {resp.text}")
        exit(1)
    print(f"[+] Пользователь {username} аутентифицирован")
    return resp.json()["access_token"]


def create_gdz(token, category, is_elite=False):
    gdz_data = {
        "description": f"{'Элитное' if is_elite else 'Обычное'} ГДЗ в {category}",
        "full_description": f"Полное описание для {'элитного' if is_elite else 'обычного'} ГДЗ в {category}",
        "category": category,
        "content_text": "Ответ: 42" if not is_elite else "Элитный ответ: 42",
        "price": 0,
        "is_elite": is_elite
    }

    files = {
        'gdz_str': (None, json.dumps(gdz_data))
    }

    try:
        resp = requests.post(
            f"{BASE_URL}/gdz/create",
            headers={"Authorization": f"Bearer {token}"},
            files=files
        )
        print(f"[DEBUG] Ответ сервера: {resp.text}")
        if resp.status_code not in [200, 201]:
            print(f"[!] Ошибка создания ГДЗ в {category}: {resp.text}")
            exit(1)
        print(f"[+] Создано {'элитное' if is_elite else 'обычное'} ГДЗ в категории '{category}'")
        try:
            response_data = resp.json()
            return response_data.get("id")
        except ValueError:
            print(f"[!] Ошибка: ответ не является JSON: {resp.text}")
            exit(1)
    except Exception as e:
        print(f"[!] Ошибка создания ГДЗ в {category}: {str(e)}")
        exit(1)


def get_user_gdz_ids(token):
    resp = requests.get(
        f"{BASE_URL}/profile/data",
        headers={"Authorization": f"Bearer {token}"}
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка получения данных профиля: {resp.text}")
        exit(1)
    profile_data = resp.json()
    print(f"[+] Данные профиля: {json.dumps(profile_data, indent=2)}")
    gdz_list = profile_data.get("gdz_list", [])
    sorted_gdz = sorted(gdz_list, key=lambda x: x["id"], reverse=True)[:5]
    if len(sorted_gdz) < 5:
        print(f"[!] Ошибка: у пользователя менее 5 ГДЗ, найдено {len(sorted_gdz)}")
        exit(1)
    return [gdz["id"] for gdz in sorted_gdz]


def run_script():
    REGULAR_CATEGORIES = random.sample(CATEGORIES, 5)
    ELITE_CATEGORY = random.choice(CATEGORIES)

    try:
        seeker_username = f"seek_{uuid.uuid4().hex[:8]}"
        seeker_password = "seeker_password"
        seeker_realname = "Seeker Realname"
        register_user(seeker_username, seeker_password, seeker_realname)
        token_seeker = auth_user(seeker_username, seeker_password)
    except Exception as e:
        print(f"[!] Ошибка при создании/аутентификации seeker: {str(e)}")
        exit(1)

    try:
        rater_username = f"rater_{uuid.uuid4().hex[:8]}"
        rater_password = "rater_password"
        rater_realname = "Rater Realname"
        register_user(rater_username, rater_password, rater_realname)
        rater_token = auth_user(rater_username, rater_password)
    except Exception as e:
        print(f"[!] Ошибка при создании/аутентификации rater: {str(e)}")
        exit(1)

    regular_gdz_ids = []
    try:
        for category in REGULAR_CATEGORIES:
            gdz_id = create_gdz(token_seeker, category)
            regular_gdz_ids.append(gdz_id)
        print(f"[+] Создано {len(regular_gdz_ids)} ГДЗ в категориях: {REGULAR_CATEGORIES}")
    except Exception as e:
        print(f"[!] Ошибка при создании ГДЗ для seeker: {str(e)}")
        exit(1)

    try:
        profile_gdz_ids = get_user_gdz_ids(token_seeker)
        print(f"[+] Последние 5 ID ГДЗ пользователя seeker: {profile_gdz_ids}")
    except Exception as e:
        print(f"[!] Ошибка при получении ГДЗ: {str(e)}")
        exit(1)

    gdz_to_rate = profile_gdz_ids
    print(f"[+] Оцениваем {len(gdz_to_rate)} ГДЗ: {gdz_to_rate}")

    try:
        for gdz_id in gdz_to_rate:
            resp_purchase = requests.post(
                f"{BASE_URL}/gdz/{gdz_id}/free-purchase",
                headers={"Authorization": f"Bearer {rater_token}"}
            )
            if resp_purchase.status_code not in [200, 201]:
                print(f"[!] Ошибка покупки ГДЗ {gdz_id}: {resp_purchase.text}")
                exit(1)
            print(f"[+] ГДЗ {gdz_id} куплено для {rater_username}")

            resp_rate = requests.post(
                f"{BASE_URL}/gdz/rate",
                json={"gdz_id": gdz_id, "value": 5},
                headers={"Authorization": f"Bearer {rater_token}"}
            )
            if resp_rate.status_code != 200:
                print(f"[!] Ошибка оценки ГДЗ {gdz_id}: {resp_rate.text}")
                exit(1)
            print(f"[+] ГДЗ {gdz_id} оценено {rater_username} (оценка: 5)")
    except Exception as e:
        print(f"[!] Ошибка при оценке ГДЗ для {rater_username}: {str(e)}")
        exit(1)

    resp = requests.get(
        f"{BASE_URL}/users/me",
        headers={"Authorization": f"Bearer {token_seeker}"}
    )
    if resp.status_code != 200:
        print(f"[!] Ошибка получения профиля seeker: {resp.text}")
        exit(1)
    user_rating = resp.json().get("user_rating", 0)
    print(f"[+] Рейтинг seeker: {user_rating}")
    if user_rating < 4.8:
        print(f"[!] Рейтинг seeker {user_rating} меньше 4.8")
        exit(1)
    print(f"[+] Пользователь seeker стал элитным (рейтинг: {user_rating})")

    print("\n[+] Поиск элитных ГДЗ во всех категориях...")
    flags = []
    for category in CATEGORIES:
        try:
            resp = requests.get(
                f"{BASE_URL}/gdz_category/{category}",
                headers={"Authorization": f"Bearer {token_seeker}"}
            )
            if resp.status_code != 200:
                print(f"[!] Ошибка получения ГДЗ в категории {category}: {resp.text}")
                continue

            print(f"Катета '{category}': {len(resp.json())} ГДЗ")
            for gdz in resp.json():
                if gdz.get("is_elite") and re.fullmatch(TEAM_REGEX, gdz.get("description")):
                    flags.append(gdz.get("description"))

        except Exception as e:
            print(f"[!] Ошибка при поиске элитных ГДЗ в категории {category}: {str(e)}")
            continue

    if not flags:
        print("[!] Флагов не найдено")
    else:
        for flag in flags:
            print(f"Flag: {flag}", flush=True)


# Бесконечный цикл с запуском каждую минуту
while True:
    print(f"\n[+] Запуск скрипта в {time.strftime('%H:%M:%S')}")
    run_script()
    print("[+] Ожидание 60 секунд перед следующим запуском...")
    time.sleep(60)